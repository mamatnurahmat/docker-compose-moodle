{"version":3,"file":"task.min.js","sources":["../src/task.js"],"sourcesContent":["/* eslint-disable no-unused-vars */\n/* eslint-disable no-dupe-keys */\n/* eslint-disable quote-props */\n/* eslint-disable no-eq-null */\n/* eslint-disable max-len */\n/* eslint-disable no-undef */\ndefine([\n    'jquery',\n    'core/ajax',\n    'core/notification',\n    'core/templates',\n    'core/modal_factory',\n    'core/modal_events',\n    'core/fragment',\n    'block_remuiblck/modal_task_popup',\n    'block_remuiblck/events',\n    'block_remuiblck/task_filters',\n    'block_remuiblck/task_view'\n], function(\n    $,\n    ajax,\n    Notification,\n    Templates,\n    ModalFactory,\n    ModalEvents,\n    Fragment,\n    ModalTaskPopup,\n    RemuiblckEvents,\n    TaskFilters,\n    TaskView\n) {\n    var SELECTORS = {\n        ADD_TASK: '[data-region=\"add-task\"]',\n        TASK: '[data-region=\"task-item\"]',\n        TASK_SUBJECT: '[data-toggle=\"collapse\"]',\n        TASK_EDIT: '[data-action=\"edit\"]',\n        TASK_POPUP: \"[data-region='task-body']\",\n        TASK_DURATION_FILTER: '[data-region=\"task-duration-filter\"]',\n        TASK_STATUS_FILTER: '[data-region=\"task-status-filter\"]',\n        TASK_FILTER_OPTION: '[data-value]',\n        TASK_SUBJECT: '.item-title .panel-heading span',\n        PANEL: '.panel',\n        PANEL_HEADING: '.panel-heading',\n        PANEL_ACTIONS: 'panel-actions',\n        TOASTER_CONTAINER: '[aria-task-toasters]',\n        TOASTER_CONTAINER_ID: 'aria-task-toasters',\n        TASK_PROCESSING: '.block-processing',\n    };\n\n    var PROMISES = {\n        /**\n         * Create new task promise call\n         * @param  {JSON} settings task settings object\n         * @return {promise} ajax promise\n         */\n        CREATE_NEW_TASK: function(settings) {\n            return ajax.call([{\n                methodname: 'block_remuiblck_create_new_task',\n                args: settings\n            }])[0];\n        },\n\n        /**\n         * Edit task settings promise call\n         * @param  {object} settings task settings object\n         * @return {promise} ajax promise\n         */\n        EDIT_TASK: function(settings) {\n            return ajax.call([{\n                methodname: 'block_remuiblck_edit_task',\n                args: settings\n            }])[0];\n        },\n\n        /**\n         * Toggle task completion promise call\n         * @param  {int}     taskid id of task\n         * @param  {bool}    status true for completed and false for incomplete\n         * @return {promise}        ajax promise\n         */\n        COMPLETE_TASK: function(taskid, status) {\n            return ajax.call([{\n                methodname: 'block_remuiblck_complete_task',\n                args: {\n                    id: taskid,\n                    status: status\n                }\n            }])[0];\n        },\n\n        /**\n         * Delete existing task\n         * @param  {int}     taskid task id\n         * @return {promise}        ajax promise\n         */\n        DELETE_TASK: function(taskid) {\n            return ajax.call([{\n                methodname: 'block_remuiblck_delete_task',\n                args: {\n                    id: taskid\n                }\n            }])[0];\n        },\n\n        /**\n         * Notify users about task\n         * @param {int}      taskid task id\n         * @param {string}   type   type of notification from one of these [create|complete|incomplete]\n         * @return {promise}        ajax promise\n         */\n        NOTIFY_USERS: function(taskid, type) {\n            return ajax.call([{\n                methodname: 'block_remuiblck_task_notify_users',\n                args: {\n                    id: taskid,\n                    type: type\n                }\n            }])[0];\n        }\n    };\n    var FRAGMENTS = {\n        /**\n         * Fetch task form fragment call\n         * @param  {int}     taskid task id\n         * @return {promise}        fragment promise call\n         */\n        GET_TASK_FORM: function(taskid) {\n            return Fragment.loadFragment(\n                'block_remuiblck',\n                'task_form',\n                contextid,\n                {\n                    taskid: taskid\n                }\n            );\n        }\n    };\n\n    /**\n     * Close task popup modal\n     * @param {ModalFactory} modal modal factory object\n     */\n    var closeTaskPopup = function(modal) {\n        modal.hide();\n        modal.destroy();\n    };\n\n    /**\n     * Get subject of task on the basis of id\n     * It check whether task is present in task list\n     * @param  {string} root   root container id\n     * @param  {[type]} taskid task id\n     * @return {string}        task subject\n     */\n    var getSubject = function(root, taskid) {\n        let task = $(root).find(SELECTORS.TASK + '[data-id=\"' + taskid + '\"]');\n        if (task) {\n            return task.find(SELECTORS.TASK_SUBJECT).text();\n        }\n        return taskid;\n    };\n\n    /**\n     * Show toaster\n     * @param  {string} root     root container id\n     * @param  {[type]} position position of toaster\n     * @param  {[type]} type     type of toaster\n     * @param  {[type]} message  message to show in toater\n     */\n    var toast = function(root, position, type, message) {\n        if ($(root).find('.' + position + SELECTORS.TOASTER_CONTAINER).length == 0) {\n            $(root).append('<div class=\"toaster ' + position + '\"' + SELECTORS.TOASTER_CONTAINER_ID + 'role=\"alert\"></div>');\n        }\n        let newToast = $('<div class=\"toast toast-just-text ' + type + ' toast-shadow\"><div class=\"toast-message\">' + message + '</div></div>');\n        $(root).find(SELECTORS.TOASTER_CONTAINER).append(newToast);\n        setTimeout(function() {\n            newToast.addClass('show');\n        }, 0);\n        setTimeout(function() {\n            newToast.removeClass('show');\n            setTimeout(function() {\n                newToast.remove();\n            }, 250);\n        }, 2000);\n    };\n\n    /**\n     * Delete task\n     * @param {string} root   block root selector\n     * @param {int}    taskid id of task\n     * @param {taskModal} taskModal\n     */\n    var deleteTask = function(root, taskid, taskModal) {\n        let subject = getSubject(root, taskid);\n        ModalFactory.create({\n            type: ModalFactory.types.SAVE_CANCEL,\n            title: M.util.get_string('deletetask', 'block_remuiblck'),\n            body: M.util.get_string('deletetaskmessage', 'block_remuiblck', subject)\n        }, $('#create'))\n        .done(function(modal) {\n            modal.setSaveButtonText(M.util.get_string('ok', 'moodle'));\n            modal.getRoot().on(ModalEvents.save, function() {\n                PROMISES.DELETE_TASK(taskid).done(function(response) {\n                    if (response.status == true) {\n                        closeTaskPopup(modal);\n                        closeTaskPopup(taskModal);\n                        loadTasks(root);\n                        toast(root, 'toast-top-center', 'toast-error', M.util.get_string('taskdeleted', 'block_remuiblck', subject));\n                        return;\n                    }\n                    Notification.exception({\n                        name: response.msg\n                    });\n                }).fail(Notification.exception);\n            }).on(ModalEvents.cancel, function() {\n                closeTaskPopup(modal);\n            });\n            modal.show();\n        })\n        .fail(Notification.exception);\n    };\n\n    /**\n     * Notify users about task. This call ajax request\n     * @param {int}      taskid   task id\n     * @param {string}   type     type of notification from one of these [create|complete|incomplete]\n     * callback call to execute after notify completion\n     */\n    var notifyUsers = function(taskid, type) {\n        var callback = arguments.length > 1 && arguments[2] !== undefined ? arguments[2] : null;\n        PROMISES.NOTIFY_USERS(taskid, type).done(callback).fail(function(ex) {\n            Notification.exception(ex);\n            if (callback != null) {\n                callback();\n            }\n        });\n    };\n\n    /**\n     * Open task popup for creating new task editing existing\n     * @param {DOM} root   block DOM object\n     * @param {int} taskid task id. -1 if new task\n     */\n    var taskPopup = function(root, taskid) {\n        ModalFactory.create(\n            {\n                type: ModalTaskPopup.TYPE,\n                templateContext: {\n                    new: taskid == -1\n                }\n            },\n            $('#create')\n        ).done(function(modal) {\n            modal.show();\n            modal.setBody(FRAGMENTS.GET_TASK_FORM(taskid));\n            modal.getRoot().on(ModalEvents.hidden, function() {\n\n                // Handle modal close event\n                closeTaskPopup(modal);\n            }).on(RemuiblckEvents.TASK_SAVE, function() {\n\n                if (!modal.valid_settings()) {\n                    return;\n                }\n                modal.saving();\n                // Handle task save event\n                let settings = modal.get_task_settings();\n                if (taskid == -1) {\n                    PROMISES.CREATE_NEW_TASK(settings).done(function(response) {\n                        if (settings.notify == true) {\n                            notifyUsers(response, 'create', function() {\n                                closeTaskPopup(modal);\n                                loadTasks(root);\n                            });\n                            return;\n                        }\n                        closeTaskPopup(modal);\n                        loadTasks(root);\n                    }).fail(function(ex) {\n                        modal.saving(false);\n                        Notification.exception(ex);\n                    });\n                    return;\n                }\n                settings.id = taskid;\n                PROMISES.EDIT_TASK(settings).done(function() {\n                    closeTaskPopup(modal);\n                    loadTasks(root);\n                }).fail(function(ex) {\n                    modal.saving(false);\n                    Notification.exception(ex);\n                });\n            }).on(RemuiblckEvents.TASK_DELETE, function() {\n\n                // Handle task delete event\n                deleteTask(root, taskid, modal);\n            }).on(RemuiblckEvents.TASK_CANCEL, function() {\n\n                // Handle task cancel event\n                closeTaskPopup(modal);\n            });\n        });\n    };\n\n    /**\n     * Load tasks in task list\n     * @param {DOM} root block DOM object\n     */\n    var loadTasks = function(root) {\n        TaskView.loadTasks(root, TaskFilters.getTaskDuration(root), TaskFilters.getTaskStatus(root));\n    };\n\n    /**\n     * Toggle task completion\n     * @param {string} root   block root selector\n     * @param {int}    taskid id of task\n     * @param {bool}   status true for completed and false for incomplete\n     */\n    var completeTask = function(root, taskid, status) {\n        TaskView.toggleTaskProcessing(root, true);\n        PROMISES.COMPLETE_TASK(taskid, status).done(function(response) {\n            if (response.status == true) {\n                loadTasks(root);\n                return;\n            }\n            $(root + ' ' + SELECTORS.TASK + '[data-id=\"' + taskid + '\"]').find('input').prop('checked', !status);\n            Notification.exception({\n                name: response.msg\n            });\n            TaskView.toggleTaskProcessing(root);\n        }).fail(function(ex) {\n            Notification.exception(ex);\n            $(root + ' ' + SELECTORS.TASK + '[data-id=\"' + taskid + '\"]').find('input').prop('checked', !status);\n            TaskView.toggleTaskProcessing(root);\n        });\n    };\n\n\n    /**\n     * Initialise dom events\n     * @param {DOM} root block DOM object\n     */\n    var initialiseEvents = function(root) {\n        $('body').on('click', SELECTORS.ADD_TASK, function() {\n            taskPopup(root, -1);\n        }).on('click', root + ' ' + SELECTORS.TASK, function(e) {\n            if ($(e.target).is('input')) {\n                completeTask(root, $(this).data('id'), $(e.target).is(':checked'));\n                return;\n            }\n            if ($(e.target).is(SELECTORS.TASK_SUBJECT)) {\n                return;\n            }\n            if ($(e.target).is(SELECTORS.TASK_EDIT) || $(e.target).parent().is(SELECTORS.TASK_EDIT)) {\n                taskPopup(root, $(this).data('id'));\n            }\n        });\n    };\n\n    var updateContainers = function(root) {\n        // Move add button panel heading\n        let button = $(root).find(SELECTORS.ADD_TASK).detach();\n        let panelHeading = $(root).closest(SELECTORS.PANEL).find(SELECTORS.PANEL_HEADING);\n        let panelActions = $(panelHeading).find('.' + SELECTORS.PANEL_ACTIONS);\n        if (panelActions.length == 0) {\n            panelActions = $('<div class=\"' + SELECTORS.PANEL_ACTIONS + '\"></div>');\n            panelHeading.append(panelActions);\n        }\n        panelActions.prepend(button);\n        button.removeClass('d-none');\n\n        let taskProcessing = $(root).find(SELECTORS.TASK_PROCESSING).detach();\n        let panel = $(panelHeading).parent(SELECTORS.PANEL);\n        panel.prepend(taskProcessing);\n    };\n\n    /**\n     * Initialise tasks\n     * @param {DOM} root block DOM object\n     */\n    var init = function(root) {\n        $(document).ready(function() {\n            initialiseEvents(root);\n            updateContainers(root);\n        });\n        TaskView.init(root);\n        TaskFilters.init(root);\n    };\n    return {\n        init: init\n    };\n});\n"],"names":["define","$","ajax","Notification","Templates","ModalFactory","ModalEvents","Fragment","ModalTaskPopup","RemuiblckEvents","TaskFilters","TaskView","SELECTORS","PROMISES","settings","call","methodname","args","taskid","status","id","type","FRAGMENTS","loadFragment","contextid","closeTaskPopup","modal","hide","destroy","deleteTask","root","taskModal","subject","task","find","text","getSubject","create","types","SAVE_CANCEL","title","M","util","get_string","body","done","setSaveButtonText","getRoot","on","save","response","loadTasks","position","message","length","append","newToast","setTimeout","addClass","removeClass","remove","toast","exception","name","msg","fail","cancel","show","taskPopup","TYPE","templateContext","new","setBody","hidden","TASK_SAVE","valid_settings","saving","get_task_settings","ex","notify","callback","arguments","undefined","notifyUsers","TASK_DELETE","TASK_CANCEL","getTaskDuration","getTaskStatus","initialiseEvents","e","target","is","toggleTaskProcessing","prop","completeTask","this","data","parent","init","document","ready","button","detach","panelHeading","closest","panelActions","prepend","taskProcessing","updateContainers"],"mappings":"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"}